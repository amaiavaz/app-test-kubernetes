## auto en main para pruebas asÃ­ mÃ¡s agilidad
trigger:
- main

# --- Es el agente que  he creado especialmente, por defecto oi muchas veces el el self-hosted que copiaste, pero no ahora, esto es mÃ¡s de infra, ya te lo dirÃ¡n ellos
pool:
  name: ado-lab-pool   # ðŸ‘ˆ tu pool self-hosted
  demands: agent.name -equals ado-agent-vm

steps:
# 1. Login en ACR
- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: 'sc-ado-docker-lab'

## AquÃ­ hago el buil y el push
- task: Docker@2
  displayName: Build and Push Image
  inputs:
    command: buildAndPush
    repository: react-hello-world
    dockerfile: '**/Dockerfile'
    containerRegistry: 'sc-ado-docker-lab'
    tags: |
      $(Build.BuildId)

# ---- Esta es la tarea para desplegar kubernetes, puedes ignorarla esta fuera de tu scope
- task: AzureCLI@2
  displayName: "Install kubectl + kubelogin locally"
  inputs:
    azureSubscription: sc-ado-wif-lab
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      echo "ðŸ“¦ Instalando kubectl y kubelogin en ~/bin..."
      mkdir -p $HOME/bin
      curl -sSL -o $HOME/bin/kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.2.10/kubelogin.zip
      unzip -o $HOME/bin/kubelogin.zip -d $HOME/bin/
      mv $HOME/bin/bin/linux_amd64/kubelogin $HOME/bin/kubelogin
      chmod +x $HOME/bin/kubelogin
      export PATH=$HOME/bin:$PATH

      echo "ðŸ”‘ Obteniendo credenciales..."
      az aks get-credentials --resource-group rg-aks-lab --name labaks --overwrite-existing --file .kubeconfig-labaks
      export KUBECONFIG=.kubeconfig-labaks

      echo "ðŸ”„ Ajustando login..."
      kubelogin convert-kubeconfig -l azurecli

      echo "ðŸ“¦ Deployando..."
      kubectl apply -f deployment.yaml -n default --validate=false
