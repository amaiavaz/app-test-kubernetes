## auto en main para pruebas asÃ­ mÃ¡s agilidad
trigger:
- main

# --- Es el agente que  he creado especialmente, por defecto oi muchas veces el el self-hosted que copiaste, pero no ahora, esto es mÃ¡s de infra, ya te lo dirÃ¡n ellos
pool:
  name: ado-lab-pool   # ðŸ‘ˆ tu pool self-hosted
  demands: agent.name -equals ado-agent-vm

steps:
# 1. Login en ACR
- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: 'sc-ado-docker-lab'

## AquÃ­ hago el buil y el push
- task: Docker@2
  displayName: Build and Push Image
  inputs:
    command: buildAndPush
    repository: react-hello-world
    dockerfile: '**/Dockerfile'
    containerRegistry: 'sc-ado-docker-lab'
    tags: |
      $(Build.BuildId)

# ---- Esta es la tarea para desplegar kubernetes, puedes ignorarla esta fuera de tu scope
- task: AzureCLI@2
  displayName: "Deploy manifests to AKS"
  inputs:
    azureSubscription: sc-ado-wif-lab   # ðŸ‘‰ tu Service Connection que ya tienes creada
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      echo "ðŸ”‘ Obteniendo credenciales del cluster..."
      az aks get-credentials \
        --resource-group rg-aks-lab \
        --name labaks \
        --overwrite-existing \
        --file .kubeconfig-labaks

      export KUBECONFIG=.kubeconfig-labaks

      echo "Ajustando login con kubelogin..."
      kubelogin convert-kubeconfig -l azurecli

      echo "Deployando manifests..."
      kubectl apply -f deployment.yaml -n default

      echo "Despliegue completado"

